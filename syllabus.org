#+TITLE: Syllabus
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP: showeverything

* Catalog Description

  What this course is about: /Mathematics for computer science./

  This course introduces the mathematical topics needed to provide a
  solid theoretical foundation for computer science. The following
  topics will be covered:

  - Sets and Logic
  - Functions and Relations
  - Combinatorics and Probability
  - Number Theory and Practice
  - Trees and Graphs
  - Languages and Grammars

* Objectives

  - Master the basic terminology and operations of sets and logic,
    functions and relations, combinatorics and probability, number
    theory and practice, trees and graphs, and languages and grammars.
  - Demonstrate logical reasoning through solving problems.
  - Learn basic functional programming by way of lisp, reading and
    writing lisp code.
  - Interpret the meaning of mathematical statements in the context of
    real-world applications.
  - Think like a mathematician by making good connections.

* Prerequisite

  You must have successfully completed the following course:

  - CS 165 Object-Oriented Software Development

* Requirements

  You are required to...

  1. attend class, as attendance and participation factor into your
     grade.
  2. read assigned portions of the course materials *before* the class
     meeting when they will be discussed.
  3. complete weekly preparation assessments on time.
  4. complete weekly homework assignments on time. These deepen your understanding of selected
     topics.

* Assessments

  There will be weekly preparation assessments that you will do during class.
  Each preparation assessment is done with a randomly selected student and consists of the student being asked to verbally defend claims of understanding the team made regarding the week's learning. 

* Assignments

  Homework assignments are of two types: Exercises and Problems. 
  If an assignment is about something you are familiar with, it is an exercise.
  If an assignment is about somthing you are unfamiliar with, it is a problem.

  Assignments are individual and group learning activities that require
  preparation before class, participation during class, or both. 
  Although time may be given during class, some time outside of class is also be required.

  As you progress through the course, your intent should be to encounter problems and learn well enough that when you see a similar assignment, it has become an exercise.
  To move from seeing assignments in any given topic as problems to exercises, you are invited to explore the discrete mathematics and elisp/functional programming principles involved.
  Exploration is how you gain prowess in any field of endevor.

* Late Policy

  Work is due as stated in [[file:schedule.org][the schedule]]. Late work is accepted *only if* the
  reason is extraordinary, and acceptance is reached through private and
  prolonged negotiation. And you must come talk to me in person --- NOT by
  email, nor any other means of communication.

* Grade Category Weighting

   - Assignments: 70%
   - Assessments: 30%

* Grade Calculating

  Your weighted percentage will determine your final grade in
  a reasonably standard way, as computed in [[file:see-grades.org][see-grades.org]].
